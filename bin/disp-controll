#!/bin/bash
# written by maximilian-huber.de

mySetBkg() {
  background="background2o.png"
  ##background="DSC03551-2-1080-bw.jpg"
  feh --bg-center "~/.xmonad/${background}"
}

myAutomatic() {
  DOCKED=$(cat /sys/devices/platform/dock.0/docked)
  CHK_HDMI1=$(xrandr |grep HDMI1 | awk ' { print $2 } ')
  CHK_HDMI2=$(xrandr |grep HDMI2 | awk ' { print $2 } ')

  grep -q closed /proc/acpi/button/lid/LID/state
  if [ $? = 0 ] ; then
    LID="closed"
  else
    LID="open"
  fi

  if [ "$CHK_HDMI1" != "connected" ] ; then
    xrandr --output HDMI1 --off
  fi
  if [ "$CHK_HDMI2" != "connected" ] ; then
    xrandr --output HDMI2 --off
  fi

  case "$DOCKED" in
    "0")
      xrandr --output LVDS1 --auto --primary
      if [ -f ~/.icc/X220.icc ]; then
        dispwin -d 1 ~/.icc/X220.icc
      fi
      if [ "$CHK_HDMI1" == "connected" ] ; then
        xrandr --output HDMI1 --auto --right-of LVDS1
      fi
      #amixer -q set Master mute
      ;;
    "1")
      if [ "$CHK_HDMI2" == "connected" ] ; then
        case "$LID" in
          "open")
            xbacklight -set 100
            xrandr --output LVDS1 --auto --primary \
              --output HDMI2 --auto --right-of LVDS1
            if [ -f ~/.icc/X220.icc ]; then
              dispwin -d 1 ~/.icc/X220.icc
            fi
            if [ -f ~/.icc/23anX220.icc ]; then
              dispwin -d 2 ~/.icc/23anX220.icc
            fi
            ;;
          "closed")
            xbacklight -set 0
            xrandr --output LVDS1 --off \
              --output HDMI2 --auto --primary
            if [ -f ~/.icc/23anX220.icc ]; then
              dispwin -d 1 ~/.icc/23anX220.icc
            fi
            ;;
        esac
      else
        xrandr --output LVDS1 --auto --primary
        if [ -f ~/.icc/X220.icc ]; then
          dispwin -d 1 ~/.icc/X220.icc
        fi
        if [ "$CHK_HDMI1" == "connected" ] ; then
          xrandr --output HDMI1 --auto --right-of LVDS1
        fi
      fi
      ;;
  esac
}

#stolen
myToggleOutput(){
  # This script toggles the extended monitor outputs if something is connected

  # your notebook monitor
  DEFAULT_OUTPUT='LVDS1'

  # outputs to toggle if connected
  OUTPUTS='HDMI1 HDMI2'

  # get info from xrandr
  XRANDR=`xrandr`

  EXECUTE=""

  for CURRENT in $OUTPUTS
  do
    if [[ $XRANDR == *$CURRENT\ connected*  ]] # is connected
    then
      if [[ $XRANDR == *$CURRENT\ connected\ \(* ]] # is disabled
      then
        EXECUTE+="--output $CURRENT --auto --above $DEFAULT_OUTPUT "
      else
        EXECUTE+="--output $CURRENT --off "
      fi
    else # make sure disconnected outputs are off
      EXECUTE+="--output $CURRENT --off "
    fi
  done

  xrandr --output $DEFAULT_OUTPUT --auto $EXECUTE
}

#stolen
myCircleOutput() {
  # Iterates through connected monitors in xrander and switched to the next one
  # each time it is run.
  #

  # get info from xrandr
  xStatus=`xrandr`
  connectedOutputs=$(echo "$xStatus" | grep " connected" | sed -e "s/\([A-Z0-9]\+\) connected.*/\1/")
  activeOutput=$(echo "$xStatus" | grep -e " connected [^(]" | sed -e "s/\([A-Z0-9]\+\) connected.*/\1/")
  connected=$(echo $connectedOutputs | wc -w)

  # initialize variables
  execute="xrandr "
  default="xrandr "
  i=1
  switch=0

  for display in $connectedOutputs
  do

    # build default configuration
    if [ $i -eq 1 ]
    then
      default=$default"--output $display --auto "
    else
      default=$default"--output $display --off "
    fi

    # build "switching" configuration
    if [ $switch -eq 1 ]
    then
      execute=$execute"--output $display --auto "
      switch=0
    else
      execute=$execute"--output $display --off "
    fi

    # check whether the next output should be switched on
    if [ $display = $activeOutput ]
    then
      switch=1
    fi

    i=$(( $i + 1 ))

  done

  # check if the default setup needs to be executed then run it
  echo "Resulting Configuration:"
  if [ -z "$(echo $execute | grep "auto")" ]
  then
    echo "Command: $default"
    `$default`
  else
    echo "Command: $execute"
    `$execute`
  fi
  echo -e "\n$(xrandr)"
}

#####################################################################
if [ $# -eq 0 ]; then
  if [ $- != *i* ]; then
    choice=1
  else
    DIALOG=${DIALOG=dialog}
    tempfile=`tempfile 2>/dev/null` || tempfile=/tmp/mymenudialog$$
    trap "rm -f $tempfile" 0 1 2 5 15

    $DIALOG --title "menu" \
      --menu "Please choose:" 15 55 5 \
      1 "automatic" \
      2 "toggle" \
      3 "cycle" 2> $tempfile

    retval=$?
    [ $retval -eq 1 -o $retval -eq 255 ] && exit
    choice=$(cat $tempfile)
  fi
else
  choice=$1
fi

case $choice in
  1) myAutomatic
    ;;
  2) myToggleOutput
    ;;
  3) myCircleOutput
    ;;
esac

#mySetBkg
setxkbmap -option ctrl:nocaps
